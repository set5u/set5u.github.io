import{cd as v,ce as b,cf as d}from"./CvXGGgpH.js";import"./CtRFD05V.js";function r(n){"@babel/helpers - typeof";return r=typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?function(e){return typeof e}:function(e){return e&&typeof Symbol=="function"&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},r(n)}function c(n,e){if(!(n instanceof e))throw new TypeError("Cannot call a class as a function")}function u(n,e){for(var i=0;i<e.length;i++){var t=e[i];t.enumerable=t.enumerable||!1,t.configurable=!0,"value"in t&&(t.writable=!0),Object.defineProperty(n,y(t.key),t)}}function s(n,e,i){return e&&u(n.prototype,e),i&&u(n,i),Object.defineProperty(n,"prototype",{writable:!1}),n}function y(n){var e=p(n,"string");return r(e)=="symbol"?e:e+""}function p(n,e){if(r(n)!="object"||!n)return n;var i=n[Symbol.toPrimitive];if(i!==void 0){var t=i.call(n,e||"default");if(r(t)!="object")return t;throw new TypeError("@@toPrimitive must return a primitive value.")}return(e==="string"?String:Number)(n)}var C=function(){function n(){c(this,n),this.supportCascades=!1}return s(n,[{key:"loadCubeData",value:function(i,t,m,f,o){if(!Array.isArray(i)){var a=v(i);if(a){t.width=a.width,t.height=a.width;try{b(t,a),d(t,i,a).then(function(){t.isReady=!0,t.onLoadedObservable.notifyObservers(t),t.onLoadedObservable.clear(),f&&f()},function(l){o==null||o("Can not upload environment levels",l)})}catch(l){o==null||o("Can not upload environment file",l)}}else o&&o("Can not parse the environment file",null)}}},{key:"loadData",value:function(){throw".env not supported in 2d."}}])}();export{C as _ENVTextureLoader};
